// --- NUEVAS TABLAS DE ACREDITACIÓN ---
datasource db {
  provider = "postgresql" // Cambia a tu motor si usas otro (mysql, sqlite, etc)
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Activity {
  id                     String                  @id @default(cuid())
  name                   String                  @unique
  imageUrl               String?
  requiredDriverLicense  String?
  applications           application[]           @relation("ActivityApplications")
  requiredDocumentations ActivityDocumentation[]
  documentationFiles     DocumentationFile[]
}

model Documentation {
  id                 String                  @id @default(cuid())
  name               String                  @unique
  isGlobal           Boolean                 @default(false)
  activities         ActivityDocumentation[]
  documentationFiles DocumentationFile[]
}

model ActivityDocumentation {
  id              String        @id @default(cuid())
  activityId      String
  documentationId String
  quantity        Int // cantidad requerida para la actividad
  isSpecific      Boolean       @default(false) // Si la documentación es específica para la actividad
  notes           String? // Observaciones, requisitos adicionales, vigencia, etc.
  activity        Activity      @relation(fields: [activityId], references: [id])
  documentation   Documentation @relation(fields: [documentationId], references: [id])

  @@unique([activityId, documentationId])
  @@index([activityId, documentationId])
}

model Zone {
  id           String        @id @default(cuid())
  name         String
  applications application[] @relation("ZoneApplications")
}

model Company {
  id          String        @id @default(cuid())
  name        String?
  phone       String        @default("")
  rut         String        @unique
  status      Boolean       @default(true) // Agregamos este campo para ver si esta activa o no
  url         String?
  city        String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Contract    Contract[]
  User        User[]
  application application[]
}

model Contract {
  id             String    @id @default(cuid())
  contractNumber String    @unique
  contractName   String
  initialDate    DateTime
  finalDate      DateTime
  companyId      String
  useracId       String // ID del adminContractor asignado
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  // Relaciones
  Company         Company           @relation(fields: [companyId], references: [id])
  userAc          User              @relation(fields: [useracId], references: [id])
  application     application[]
  ReassignmentLog ReassignmentLog[]

  @@index([companyId])
  @@index([useracId])
}

model User {
  id                 String         @id @default(cuid())
  email              String         @unique
  password           String?
  run                String         @unique
  name               String
  middleName         String?
  lastName           String
  secondLastName     String?
  displayName        String
  userName           String
  image              String?
  phoneNumber        String
  category           String
  companyId          String?
  deletedLogic       Boolean?       @default(false)
  lastActive         DateTime?
  emailVerified      DateTime?
  isActive           Boolean        @default(true)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  //Relación con la tabla intermedia
  accounts           Account[]
  Contract           Contract[]
  company            Company?       @relation(fields: [companyId], references: [id])
  applicationsAsAc   application[]  @relation("AdminContractorApplications")
  application        application[]  @relation("UserApplications")
  applicationsAsSheq application[]  @relation("SheqApplications")
  roles              UserRole[]
  Notification       Notification[]

  // Relaciones con ReassignmentLog
  previousReassignments ReassignmentLog[] @relation("PreviousAC")
  newReassignments      ReassignmentLog[] @relation("NewAC")

  reassignmentsOwned ReassignmentLog[]  @relation("ReassignmentOwner")
  // Relaciones con adminContractor
  adminContractorId  String?
  adminContractor    User?              @relation("UserToAdminContractor", fields: [adminContractorId], references: [id])
  assignedUsers      User[]             @relation("UserToAdminContractor")
  applicationAudits  ApplicationAudit[] @relation("UserApplicationAudits")
}

model application {
  id                 String              @id @default(cuid())
  status             Status              @default(primeraVez)
  workerName         String
  workerPaternal     String
  workerMaternal     String
  workerRun          String
  displayWorkerName  String
  license            License?
  licenseExpiration  DateTime?
  stateAc            StateAc
  stateSheq          StateSheq
  companyId          String?
  userId             String?
  contractId         String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  userAcId           String?
  userSheqId         String?
  lastReviewedAt     DateTime?
  reviewDeadline     DateTime?
  company            Company?            @relation(fields: [companyId], references: [id])
  contract           Contract?           @relation(fields: [contractId], references: [id])
  userAc             User?               @relation("AdminContractorApplications", fields: [userAcId], references: [id])
  user               User?               @relation("UserApplications", fields: [userId], references: [id])
  userSheq           User?               @relation("SheqApplications", fields: [userSheqId], references: [id])
  activities         Activity[]          @relation("ActivityApplications")
  zones              Zone[]              @relation("ZoneApplications")
  documentationFiles DocumentationFile[]
  audits             ApplicationAudit[]
}

model Role {
  id    String     @id @default(cuid())
  name  RoleEnum   @unique
  users UserRole[]
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

enum RoleEnum {
  user
  admin
  sheq
  adminContractor
  credential
}

model ReassignmentLog {
  id           String   @id @default(cuid())
  previousAcId String
  newAcId      String
  contractId   String
  userId       String? // Hacemos el campo opcional
  reason       String
  createdAt    DateTime @default(now())

  previousAc User     @relation("PreviousAC", fields: [previousAcId], references: [id])
  newAc      User     @relation("NewAC", fields: [newAcId], references: [id])
  contract   Contract @relation(fields: [contractId], references: [id])
  owner      User?    @relation("ReassignmentOwner", fields: [userId], references: [id]) // Hacemos la relación opcional
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User? @relation(fields: [userId], references: [id])
}

enum NotificationType {
  INACTIVE_REQUEST
  REASSIGNMENT
  REQUEST_APPROVED
  REQUEST_REJECTED
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String   @id @unique
  token      String
  expires    DateTime
}

enum Status {
  primeraVez
  renovacion
}

enum License {
  a1
  a2
  a3
  a4
  a5
  b
  c
  d
}

enum StateAc {
  aprobado
  pendiente
  adjuntar
}

enum StateSheq {
  aprobado
  pendiente
  rechazado
}

// Archivos/documentos subidos para la solicitud y sus actividades/documentaciones
model DocumentationFile {
  id              String         @id @default(cuid())
  applicationId   String
  activityId      String?
  documentationId String?
  url             String // URL del archivo subido
  type            FileType // Tipo de archivo (PDF, IMG, etc)
  uploadedAt      DateTime       @default(now())
  application     application    @relation(fields: [applicationId], references: [id])
  activity        Activity?      @relation(fields: [activityId], references: [id])
  documentation   Documentation? @relation(fields: [documentationId], references: [id])

  @@index([applicationId, activityId, documentationId])
}

// Auditoría de acciones sobre la solicitud
model ApplicationAudit {
  id            String      @id @default(cuid())
  applicationId String
  action        AuditAction
  changedById   String
  changedAt     DateTime    @default(now())
  details       String?
  application   application @relation(fields: [applicationId], references: [id])
  changedBy     User        @relation("UserApplicationAudits", fields: [changedById], references: [id])
}

enum FileType {
  PDF
  IMG
  DOC
  OTHER
}

enum AuditAction {
  CREACION
  EDICION
  APROBACION
  RECHAZO
  OBSERVACION
  ELIMINACION
}
