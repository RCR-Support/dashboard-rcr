generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Company {
  id          String        @id @default(cuid())
  name        String?
  phone       String        @default("")
  rut         String        @unique
  status      Boolean       @default(true) // Agregamos este campo para ver si esta activa o no
  url         String?
  city        String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Contract    Contract[]
  User        User[]
  application application[]
}

model Contract {
  id              String            @id @default(cuid())
  finalDate       DateTime
  deletedAt       DateTime?
  companyId       String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  useracId        String
  contractName    String
  contractNumber  String            @unique
  initialDate     DateTime
  Company         Company           @relation(fields: [companyId], references: [id])
  userAc          User              @relation(fields: [useracId], references: [id])
  application     application[]
  ReassignmentLog ReassignmentLog[]
}

model User {
  id                 String         @id @default(cuid())
  email              String         @unique
  password           String?
  run                String         @unique
  name               String
  middleName         String?
  lastName           String
  secondLastName     String?
  displayName        String
  userName           String
  image              String?
  phoneNumber        String
  category           String
  companyId          String?
  deletedLogic       Boolean?
  lastActive         DateTime?
  emailVerified      DateTime?
  isActive           Boolean        @default(true)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  //Relación con la tabla intermedia
  accounts           Account[]
  Contract           Contract[]
  company            Company?       @relation(fields: [companyId], references: [id])
  applicationsAsAc   application[]  @relation("AdminContractorApplications")
  application        application[]  @relation("UserApplications")
  applicationsAsSheq application[]  @relation("SheqApplications")
  roles              UserRole[]
  Notification       Notification[]

  // Relaciones con ReassignmentLog
  previousReassignments ReassignmentLog[] @relation("PreviousAC")
  newReassignments      ReassignmentLog[] @relation("NewAC")
  reassignmentsOwned    ReassignmentLog[] @relation("ReassignmentOwner")
  // Relaciones con adminContractor
  adminContractorId     String?
  adminContractor       User?             @relation("UserToAdminContractor", fields: [adminContractorId], references: [id])
  assignedUsers         User[]            @relation("UserToAdminContractor")
}

model application {
  id                String    @id @default(cuid())
  status            Status    @default(primeraVez)
  workerName        String
  workerPaternal    String
  workerMaternal    String
  workerRun         String
  displayWorkerName String
  license           License?
  licenseExpiration DateTime?
  stateAc           StateAc
  stateSheq         StateSheq
  companyId         String?
  userId            String?
  contractId        String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userAcId          String?
  userSheqId        String?
  lastReviewedAt    DateTime?
  reviewDeadline    DateTime?
  company           Company?  @relation(fields: [companyId], references: [id])
  contract          Contract? @relation(fields: [contractId], references: [id])
  userAc            User?     @relation("AdminContractorApplications", fields: [userAcId], references: [id])
  user              User?     @relation("UserApplications", fields: [userId], references: [id])
  userSheq          User?     @relation("SheqApplications", fields: [userSheqId], references: [id])
}

model Role {
  id    String     @id @default(cuid())
  name  RoleEnum   @unique
  users UserRole[]
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

enum RoleEnum {
  user
  admin
  sheq
  adminContractor
  credential
}

model ReassignmentLog {
  id           String   @id @default(cuid())
  previousAcId String
  newAcId      String
  contractId   String
  userId       String? // Hacemos el campo opcional
  reason       String
  createdAt    DateTime @default(now())

  previousAc User     @relation("PreviousAC", fields: [previousAcId], references: [id])
  newAc      User     @relation("NewAC", fields: [newAcId], references: [id])
  contract   Contract @relation(fields: [contractId], references: [id])
  owner      User?    @relation("ReassignmentOwner", fields: [userId], references: [id]) // Hacemos la relación opcional
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User? @relation(fields: [userId], references: [id])
}

enum NotificationType {
  INACTIVE_REQUEST
  REASSIGNMENT
  REQUEST_APPROVED
  REQUEST_REJECTED
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String   @id @unique
  token      String
  expires    DateTime
}

enum Status {
  primeraVez
  renovacion
}

enum License {
  a1
  a2
  a3
  a4
  a5
  b
  c
  d
}

enum StateAc {
  aprobado
  pendiente
  adjuntar
}

enum StateSheq {
  aprobado
  pendiente
  rechazado
}
