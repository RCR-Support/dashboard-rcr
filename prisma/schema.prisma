generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Company {
  id          String        @id @default(cuid())
  name        String?
  phone       String        @default("")
  rut         String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Contract    Contract[]
  User        User[]
  application application[]
}

model Contract {
  id             String        @id @default(cuid())
  finalDate      DateTime
  deletedAt      DateTime?
  companyId      String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  useracId       String
  contractName   String
  contractNumber String        @unique
  initialDate    DateTime
  Company        Company       @relation(fields: [companyId], references: [id])
  userAc         User          @relation(fields: [useracId], references: [id])
  application    application[]
}

model User {
  id                 String        @id @default(cuid())
  email              String        @unique
  password           String?
  emailVerified      DateTime?
  image              String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  displayName        String
  name               String
  lastName           String
  middleName         String?
  userName           String
  secondLastName     String?
  category           String
  companyId          String?
  deletedLogic       Boolean?
  phoneNumber        String
  run                String
  accounts           Account[]
  Contract           Contract[]
  company            Company?      @relation(fields: [companyId], references: [id])
  applicationsAsAc   application[] @relation("AdminContractorApplications")
  application        application[] @relation("UserApplications")
  applicationsAsSheq application[] @relation("SheqApplications")
  // Nueva relaci√≥n con la tabla intermedia
  roles              UserRole[]
}

model application {
  id                String    @id @default(cuid())
  status            Status    @default(primeraVez)
  workerName        String
  workerPaternal    String
  workerMaternal    String
  workerRun         String
  displayWorkerName String
  license           License?
  licenseExpiration DateTime?
  stateAc           StateAc
  stateSheq         StateSheq
  companyId         String?
  userId            String?
  contractId        String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userAcId          String?
  userSheqId        String?
  company           Company?  @relation(fields: [companyId], references: [id])
  contract          Contract? @relation(fields: [contractId], references: [id])
  userAc            User?     @relation("AdminContractorApplications", fields: [userAcId], references: [id])
  user              User?     @relation("UserApplications", fields: [userId], references: [id])
  userSheq          User?     @relation("SheqApplications", fields: [userSheqId], references: [id])
}

model Role {
  id    String     @id @default(cuid())
  name  RoleEnum   @unique
  users UserRole[]
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

enum RoleEnum {
  user
  admin
  sheq
  adminContractor
  credential
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String   @id @unique
  token      String
  expires    DateTime
}

enum Status {
  primeraVez
  renovacion
}

enum License {
  a1
  a2
  a3
  a4
  a5
  b
  c
  d
}

enum StateAc {
  aprobado
  pendiente
  adjuntar
}

enum StateSheq {
  aprobado
  pendiente
  rechazado
}
